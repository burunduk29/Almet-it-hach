from aiogram import types, executor, Dispatcher, Bot
from bs4 import BeautifulSoup
import requests
import openai
import cfg

bot = Bot(token=cfg.TOKEN)
dp = Dispatcher(bot)
gpt_token = "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"
openai.api_key = gpt_token


# fake user

with requests.Session() as se:
    se.headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36",
        "Accept-Encoding": "gzip, deflate",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8",
        "Accept-Language": "en"
    }

# start function


@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    await bot.send_message(message.chat.id, text=f"<b>üíä –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤ –ª–µ–∫–∞—Ä—Å—Ç–≤!</b>\n\n"
                                                 f"üß™ –ó–¥–µ—Å—å –º—ã –ø–æ–º–æ–∂–µ–º –í–∞–º –Ω–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã —Å –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º –¥–µ–π—Å—Ç–≤—É—é—â–∏–º –≤–µ—â–µ—Å—Ç–≤–æ–º –∏–ª–∏ —Å—Ö–æ–∂–∏–º–∏ —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏\n\n"
                                                 f"üí™ –ù–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å–¥–µ–ª–∞–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–º–µ–Ω—ã, –∞ —Ç–∞–∫–∂–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏—Ö —Ü–µ–Ω–∞–º–∏.\n\n"
                                                 f"<b>üìöüöë –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —è–≤–ª—è—é—Ç—Å—è —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –Ω–µ –∑–∞–º–µ–Ω—è—é—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å –≤—Ä–∞—á–æ–º –∏–ª–∏ —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–æ–º. –í—Å–µ–≥–¥–∞ –æ–±—Å—É–∂–¥–∞–π—Ç–µ —Å –Ω–∏–º–∏ —Å–≤–æ–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–æ–≥–æ–≤.</b>\n\n"
                                                 f"<b>üîç –£–¥–∞—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞</b>\n\n"
                                                 f"üñäÔ∏è –î–ª—è –Ω–∞—á–∞–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞:", parse_mode="HTML")

# algorithm function


@dp.message_handler(lambda message: message.text)
async def result(message: types.Message):
    message.text.lower()
    url_1 = "https://zdesapteka.ru/catalog/?q=–∞"
    url = url_1 + message.text
    name_arr = []
    price_arr = []

    # Send a GET request to the URL
    response = se.get(url)
    # send postcode in console
    print(response)

    soup = BeautifulSoup(response.content, 'html.parser')

    # Find all the joke elements on the page
    jokes = soup.find_all('div', class_='content-box')

    # Extract and print the text of each joke
    for joke in jokes:
        joke_text = joke.find('a', class_='title')
        if joke_text:
            name_arr.append(joke_text.getText(strip=True))

    soup = BeautifulSoup(response.content, 'html.parser')

    # Find all the joke elements on the page
    jokes = soup.find_all('div', class_='basket-box')

    # Extract and print the text of each joke
    for joke in jokes:
        joke_text = joke.find('span', class_='price_value product_current_price')
        if joke_text:
            price_arr.append(joke_text.getText(strip=True))

    analis = []

    # Output in the format "name - price"
    count = 0
    if len(name_arr) == len(price_arr):
        for i in range(len(name_arr)):
            count += 1
            analis.append(f"üíä {name_arr[i]} - {price_arr[i]}")
            if count > 29:
                break
    text_msg = "\n".join(analis)
    await bot.send_message(message.chat.id, text=f"–ê–Ω–∞–ª–æ–≥–∏: \n{text_msg}")
    int_price = []
    for i in range(len(price_arr)):
        int_price.append(price_arr[i].replace(" ", ""))

    int_price2 = []

    # finding the cheapest

    for i in range(len(price_arr)):
        int_price2.append(int(int_price[i].replace("—Ä—É–±.", "")))

    minIndex = int_price2.index(min(int_price2))

    # sending the cheapest

    await bot.send_message(message.chat.id, text=f"–°–∞–º–æ–µ –¥–µ—à–µ–≤–æ–µ: üíµ {name_arr[minIndex]} - {int_price2[minIndex]} —Ä—É–±.")

    # pars photo url

    url_photo = f'https://yandex.ru/images/search?from=tabbar&text={message.text}'
    response_photo = se.get(url_photo)
    print(f'photo {response_photo}')
    soup = BeautifulSoup(response_photo.content, 'html.parser')
    images = soup.find_all('img', class_='serp-item__thumb justifier__thumb')
    for image in images:
        src = image.get("src")
        if src:
            print(src)

            # photo src in console

            src_compl = f'https:{src}'

            # sending photo in user chat

            await bot.send_photo(message.chat.id, photo=f'{src_compl}')

            # send photo url in console

            print(src_compl)

        # break in cycle
        break

    # advice from ChatGPT

    await bot.send_message(message.chat.id, text=f"<code>–ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ, ChatGPT –¥–∞—Å—Ç –≤–∞–º —Å–æ–≤–µ—Çüôà...</code>", parse_mode="HTML")
    engine = "text-davinci-003"
    prompt = f"–õ—É—á—à–∏–π –∞–Ω–∞–ª–æ–≥ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º {message.text}, –æ–±–æ—Å–Ω—É–π, –∏ –Ω–∞–ø–∏—à–∏ —Ü–µ–Ω—É –∞–Ω–∞–ª–æ–≥–∞ –≤ —Ä—É–±–ª—è—Ö"
    completion = openai.Completion.create(engine=engine,
                                          prompt=prompt,
                                          temperature=0.5,
                                          max_tokens=1000)
    gpt_otv = completion.choices[0]['text']
    if gpt_otv[0] == ".":
        gpt_otv_compl = gpt_otv[3:]
        await bot.send_message(message.chat.id, text=gpt_otv_compl)
        print(True)
    else: await bot.send_message(message.chat.id, text=completion.choices[0]['text'])


if __name__ == '__main__':
    print("Let's go!")
    executor.start_polling(dp, skip_updates=True)
    print("Stop work!")
